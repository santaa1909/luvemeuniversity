Mounting vdisks with error lvls:

diskpart /s "D:\SCRIPTS\mount_vdisk_projects.txt"

IF %errorlevel%==0 goto success
IF %errorlevel%>==1 goto fail

:success
echo VDisk successfully attached.	Laufwerk: P:\	User: %username%	Datum: %date%	Zeit: %time% >> "D:\LOGS\vdisk_log.txt"
goto ende

:fail
echo VDisk NOT attached!	Laufwerk: P:\	User: %username%	Datum: %date%	Zeit: %time% >> "D:\LOGS\vdisk_log.txt"
goto ende

:ende
exit




diskpart /s "D:\SCRIPTS\mount_vdisk_encrypted.txt"

IF %errorlevel%==0 goto success
IF %errorlevel%==1 goto fail

:success
echo VDisk successfully attached.	Laufwerk: E:\	User: %username%	Datum: %date%	Zeit: %time% >> "D:\LOGS\vdisk_log.txt"
goto ende

:fail
echo VDisk NOT attached!	Laufwerk: E:\	User: %username%	Datum: %date%	Zeit: %time% >> "D:\LOGS\vdisk_log.txt"
goto ende

:ende
exit




mounting vdisk without errorlevels

echo off
cls
diskpart /s "...." | echo %username% %date% %time% >> "D:\...."
pause

select vdisk file="..."
attach vdisk
select vdiks file="..."
attach vdisk



directorys
echo off
cls
d:
mkdir DATA SCRIPTS LOGS
cd DATA
mkdir ADMIN BACKUP HOME FILES
cd FILES
mkdir ORGANISTATION BUCHHALTUNG PRODUKTION IT
cd BUCHHALTUNG
mkdir Allgemein Intern Management
cd D:\DATA\FILES\PRODUKTION
mkdir Allgemein Intern Management
cd D:\DATA\FILES\IT
mkdir Allgemein Intern Management



creating user directories

@echo off

IF EXIST "C:\UEBUNG\SWAP\%username%" (
  echo Directory 'C:\UEBUNG\SWAP\%username%' already exists! - Nothing todo!
) ELSE (
  echo Create User directory for '%username%'
  mkdir "C:\UEBUNG\SWAP\%username%"
)


:ende
pause
REM exit

deleting user directory

@echo off

IF EXIST "C:\UEBUNG\SWAP\%username%" (
  echo Delete direcotry 'C:\UEBUNG\SWAP\%username%'
  rmdir /S /Q C:\UEBUNG\SWAP\%username%\
)


:ende
pause
REM exit



netuse connects for usesers:

net use S: \\CBSGL-XX\SCRIPTS




POWERSHELL

user log in log
$LogTime = get-date -Format "HH:mm dd.mm.yyyy"
$user = $env:USERNAME

"Login Successfull          Time:$Logtime          User:$user"|out-file -FilePath d:\logs\log_logons.txt -Append

to activate script u need (CMD/BAT):
PowerShell.exe -Command "D:\SCRIPTS\login_user_log_successfull.ps1"

backups:

to start backup powershell (CMD/BAT):
@echo off

set /p abfrage=Wollen Sie ein vollständiges Backup machen, oder nur neue/geänderte Datein übertragen? (A)ALLE / (N)NEUE...

if "%abfrage%" == "A" goto :alle
if "%abfrage%" == "N" goto :neue

:alle
PowerShell.exe -Command "D:\SCRIPTS\backup_folder_home_manual_complete.ps1"
goto ende

:neue
PowerShell.exe -Command "D:\SCRIPTS\backup_folder_home_manual_newdata.ps1"
goto ende

:ende
pause
exit



auto:

$Username = $env:USERNAME
$LogTime = get-date -Format "MM-dd-yyyy_HH-mm-ss" 
Set-Variable -name Size -value (Get-ChildItem -Recurse D:\Home\$Username|Measure-Object length -sum).sum
Set-Variable -Name amount -Value (Get-ChildItem D:\Home\$Username|Measure-Object).count

xcopy /Y /H /I /E d:\Home\$Username \\CBSGL-XX\Backup$\$Username

"USERNAME:$Username - LOGTIME:$logtime - SIZE:$size bytes - AMOUNT:$amount Datein - TYPE:automatic"|out-file -FilePath D:\LOGS\$username\log_backup_automatic.txt -Append

manual complete:

$Username = $env:USERNAME
$LogTime = get-date -Format "MM-dd-yyyy_HH-mm-ss" 
Set-Variable -name Size -value (Get-ChildItem -Recurse D:\Home\$Username|Measure-Object length -sum).sum
Set-Variable -Name amount -Value (Get-ChildItem D:\Home\$Username|Measure-Object).count

robocopy /E d:\Home\$Username D:\BACKUP\$Username

"USERNAME:$Username - LOGTIME:$logtime - SIZE:$size bytes - AMOUNT:$amount Datein - TYPE:manual-complete"|out-file -FilePath D:\LOGS\$username\log_backup_manual.txt -Append


manual new data:

$Username = $env:USERNAME
$LogTime = get-date -Format "MM-dd-yyyy_HH-mm-ss" 
Set-Variable -name Size -value (Get-ChildItem -Recurse D:\Home\$Username|Measure-Object length -sum).sum
Set-Variable -Name amount -Value (Get-ChildItem D:\Home\$Username|Measure-Object).count

robocopy d:\Home\$Username /E /XO D:\BACKUP\$Username

"USERNAME:$Username - LOGTIME:$logtime - SIZE:$size bytes - AMOUNT:$amount Datein - TYPE:manual-newdata"|out-file -FilePath D:\LOGS\$username\log_backup_manual.txt -Append





changing policy remote singed

#Set Execution Posiltion auf RemoteSigned
currPolicy = Get-ExecutionPolicy
Write "Current ExectionPosition is <$currPolicy> - update to RemoteSigned"
Set-ExecutionPolicy RemoteSigned

#
Get-Process | Format-Table -property  processName, pm, vm  

#Create new alias 'gel' for Get-EventLog
New-Alias -Name gel -Value Get-EventLog
Get-Alias -Name gel

New-Alias -Name Of -Value Out-File
Get-Alias -Name Of


#Reset back execution policy
Set-ExecutionPolicy $currPolicy

pause







